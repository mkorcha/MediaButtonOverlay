import org.ajoberstar.grgit.Grgit
import org.ajoberstar.grgit.operation.ResetOp

def githubDir   = 'github'
// Form of: directory, repo URI, commit hash to get, project directory in repo (if needed)
def githubRepos = [['colorPickerPreference', 'git@github.com:attenzione/android-ColorPickerPreference.git', 'ba6d45b9aa', 'ColorPickerPreference'],
                   ['sliderPreference'     , 'git@github.com:jayschwa/AndroidSliderPreference.git',         '3f6163c01d']]

def packageId = 'com.mikekorcha.mediabuttonoverlay'

apply plugin: 'com.android.application'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.1.0'
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId packageId
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 9
        versionName "2.1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    maven {
        url 'https://raw.github.com/wada811/Android-Material-Design-Colors/master/repository/'
    }

    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.twofortyfouram:locale-api:1.0@aar'

    compile 'com.android.support:appcompat-v7:23.0.0'

    compile 'com.getbase:floatingactionbutton:1.4.0'
    compile 'at.wada811:android-material-design-colors:1.1.0'

    if((new File(githubDir)).isDirectory()) {
        githubRepos.each { repoDef ->
            compile project(":$githubDir:${repoDef[0]}" + (repoDef.size() > 3 ? ":${repoDef[3]}" : ''))
        }
    }
}

task gitClone {
    def gitDir = new File(githubDir)

    if(!gitDir.isDirectory()) {
        gitDir.mkdir()
    }

    githubRepos.each { repoDef ->
        def repoDir = githubDir + '/' + repoDef[0]

        if (!(new File(repoDir).exists())) {
            def repo = Grgit.clone(dir: repoDir, uri: repoDef[1])
            repo.reset(commit: repoDef[2], mode: ResetOp.Mode.HARD)
        }
    }
}
